import axios from 'axios';

const state = {
  uploadedFiles: [],
  uploadProgress: {},
  baseUrl: 'http://95.164.90.115:3000'
};

const mutations = {
  ADD_FILE(state, fileData) {
    // –ó–∞–º–µ–Ω—è–µ–º localhost –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞
    if (fileData.url.includes('localhost:3000')) {
      fileData.url = fileData.url.replace('http://localhost:3000', state.baseUrl);
    }
    // –î–æ–±–∞–≤–ª—è–µ–º baseUrl –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç—è–º
    if (!fileData.url.startsWith('http')) {
      fileData.url = `${state.baseUrl}${fileData.url}`;
    }
    state.uploadedFiles.push(fileData);
  },
  REMOVE_FILE(state, index) {
    state.uploadedFiles.splice(index, 1);
  },
  CLEAR_FILES(state) {
    state.uploadedFiles = [];
    state.uploadProgress = {};
  },
  SET_UPLOAD_PROGRESS(state, { fileName, progress }) {
    state.uploadProgress[fileName] = progress;
  }
};

const actions = {
  validateFile({ commit }, file) {
    console.group('üìÑ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞');
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', file.name);
    
    return new Promise((resolve, reject) => {
      const allowedTypes = [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.oasis.opendocument.text',
        'text/plain',
        'application/rtf',
        'text/rtf'  // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π MIME-—Ç–∏–ø –¥–ª—è RTF
      ];
      
      const allowedExtensions = ['.pdf', '.doc', '.docx', '.odt', '.txt', '.rtf'];
      const fileName = file.name.toLowerCase();
      const fileExtension = fileName.slice(fileName.lastIndexOf('.'));
      const hasValidExtension = allowedExtensions.includes(fileExtension);
      
      console.log('üìë –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:', {
        name: file.name,
        type: file.type,
        size: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
        extension: fileExtension,
        validExtension: hasValidExtension,
        validType: allowedTypes.includes(file.type)
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ MIME-—Ç–∏–ø, –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!allowedTypes.includes(file.type) && !hasValidExtension) {
        console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', {
          type: file.type,
          extension: fileExtension
        });
        console.groupEnd();
        reject(new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã DOC, DOCX, PDF, TXT, RTF –∏ ODT'));
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (10MB)
      const maxSize = 10 * 1024 * 1024;
      if (file.size > maxSize) {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', {
          size: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
          maxSize: '10 MB'
        });
        console.groupEnd();
        reject(new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB'));
        return;
      }
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª RTF, –Ω–æ —Ç–∏–ø –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      if (fileExtension === '.rtf' && !file.type.includes('rtf')) {
        console.log('‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MIME-—Ç–∏–ø –¥–ª—è RTF —Ñ–∞–π–ª–∞');
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        file = new File([file], file.name, { type: 'application/rtf' });
      }
      
      console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
      console.groupEnd();
      resolve(file);
    });
  },
  
  async uploadFile({ commit, dispatch }, file) {
    console.group('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    try {
      console.log('üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
        name: file.name,
        type: file.type,
        size: `${(file.size / 1024).toFixed(2)} KB`,
        lastModified: new Date(file.lastModified).toLocaleString()
      });
      
      if (!file) {
        throw new Error('–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ localStorage
      const userId = localStorage.getItem('userId');
      console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      if (!userId) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
      }

      await dispatch('validateFile', file);
      
      const formData = new FormData();
      formData.append('format', file);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData
      console.log('üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData:');
      for (let [key, value] of formData.entries()) {
        console.log(`${key}:`, {
          name: value.name,
          type: value.type,
          size: value.size
        });
      }
      
      const uploadUrl = `${state.baseUrl}/upload/format/${userId}`;
      console.log('üåê URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', uploadUrl);

      const config = {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Accept': '*/*'
        },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}%`);
          commit('SET_UPLOAD_PROGRESS', { fileName: file.name, progress });
        }
      };

      console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞:', {
        url: uploadUrl,
        method: 'POST',
        headers: config.headers
      });

      try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        const response = await axios.post(uploadUrl, formData, config);
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
          status: response.status,
          statusText: response.statusText,
          headers: response.headers,
          data: response.data
        });
        
        if (!response.data) {
          throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        if (!response.data.fileUrl) {
          console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', response.data);
          throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª URL —Ñ–∞–π–ª–∞');
        }

        const fileData = {
          name: file.name,
          url: response.data.fileUrl,
          type: file.type,
          size: file.size
        };

        console.log('üìÑ –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', fileData);
        commit('ADD_FILE', fileData);
        
        console.log('‚ú® –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        console.groupEnd();
        return {
          success: true,
          message: response.data.message || '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        };
      } catch (error) {
        console.group('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:');
        if (error.response) {
          // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          console.log('–°—Ç–∞—Ç—É—Å:', error.response.status);
          console.log('–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞:', error.response.statusText);
          console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.response.headers);
          console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        } else if (error.request) {
          // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
          console.log('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞:', error.request);
        } else {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
          console.log('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        }
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error.config);
        console.groupEnd();
        throw error;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      console.groupEnd();
      return {
        success: false,
        message: error.response?.data?.error || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
      };
    }
  },
  
  removeFile({ commit, state }, index) {
    try {
      commit('REMOVE_FILE', index);
      return {
        success: true,
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞'
      };
    }
  },

  clearFiles({ commit }) {
    commit('CLEAR_FILES');
  }
};

const getters = {
  getUploadedFiles(state) {
    return state.uploadedFiles;
  },
  getUploadProgress(state) {
    return state.uploadProgress;
  }
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};