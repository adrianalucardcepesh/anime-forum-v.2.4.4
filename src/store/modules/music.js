import axios from 'axios';
import { ref as databaseRef, set, get } from 'firebase/database';
import { database } from '../../plugins/firebase';
import lamejs from 'lamejs';

const state = {
  postAudio: {},
  audioFiles: [],
  uploadProgress: {},
  baseUrl: 'http://95.164.90.115:3000'
};

const mutations = {
  SET_POST_AUDIO(state, { postId, audio }) {
    state.postAudio[postId] = audio;
  },
  ADD_AUDIO(state, audioData) {
    console.log('üéµ ADD_AUDIO –º—É—Ç–∞—Ü–∏—è:', { 
      –≤—Ö–æ–¥–Ω—ã–µ–î–∞–Ω–Ω—ã–µ: audioData,
      —Ç–µ–∫—É—â–∏–µ–§–∞–π–ª—ã: state.audioFiles 
    });

    if (!Array.isArray(state.audioFiles)) {
      state.audioFiles = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL
    if (!audioData.url) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –≤ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ:', audioData);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
    let audioUrl = audioData.url;
    if (audioUrl.includes('localhost:3000')) {
      audioUrl = audioUrl.replace('http://localhost:3000', state.baseUrl);
    }
    if (!audioUrl.startsWith('http')) {
      audioUrl = `${state.baseUrl}${audioUrl}`;
    }

    const newAudio = {
      ...audioData,
      url: audioUrl
    };

    state.audioFiles.push(newAudio);
    
    console.log('üéµ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', { 
      –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π–§–∞–π–ª: newAudio,
      –≤—Å–µ–§–∞–π–ª—ã: state.audioFiles 
    });
  },
  REMOVE_AUDIO(state, index) {
    state.audioFiles.splice(index, 1);
  },
  CLEAR_AUDIO(state) {
    state.audioFiles = [];
    state.uploadProgress = {};
  },
  SET_UPLOAD_PROGRESS(state, { fileName, progress }) {
    state.uploadProgress = {
      ...state.uploadProgress,
      [fileName]: progress
    };
  }
};

const actions = {
  async validateAudio({ commit }, file) {
    console.log(' –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:', file.name);
    return new Promise((resolve, reject) => {
      const allowedTypes = [
        'audio/mpeg',
        'audio/mp3',
        'audio/wav',
        'audio/x-wav',
        'audio/flac',
        'audio/x-flac',
        'audio/x-aiff',
        'audio/aiff'
      ];

      if (!allowedTypes.includes(file.type)) {
        console.error(' –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type);
        reject(new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã MP3, WAV, FLAC –∏ AIFF'));
        return;
      }

      const fileName = file.name.toLowerCase();
      const allowedExtensions = ['.mp3', '.wav', '.flac', '.aiff'];
      
      if (!allowedExtensions.some(ext => fileName.endsWith(ext))) {
        console.error(' –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', fileName);
        reject(new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3, .wav, .flac –∏–ª–∏ .aiff'));
        return;
      }

      resolve(file);
    });
  },

  async uploadAudio({ commit }, file) {
    console.log('üéµ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      await this.dispatch('music/validateAudio', file);
      
      const fileName = file.name;
      const fileType = file.type;
      const fileSize = (file.size / (1024 * 1024)).toFixed(2) + ' MB';
      
      console.log('‚¨ÜÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', { fileName, fileType, fileSize });
      
      const formData = new FormData();
      formData.append('audio', file);
      
      console.log('üì¶ FormData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
      for (let [key, value] of formData.entries()) {
        console.log('–ö–ª—é—á:', key, '–ó–Ω–∞—á–µ–Ω–∏–µ:', value);
      }
      
      const userId = 'c4x6VsxAh2gEaCzICXIJPUNdet33';
      const url = `${state.baseUrl}/upload/audio/${userId}`;
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
        url,
        method: 'POST',
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      const response = await axios.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          commit('SET_UPLOAD_PROGRESS', { fileName, progress });
          console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:', progress + '%');
        }
      });
      
      console.log('üì• –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        headers: response.headers,
        data: response.data
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
      try {
        const checkResponse = await axios.head(response.data.url);
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞:', {
          status: checkResponse.status,
          headers: checkResponse.headers
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞:', error);
      }

      if (response.status === 200 && response.data) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞:', {
          hasData: !!response.data,
          dataKeys: Object.keys(response.data),
          dataValues: response.data
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –≤ –æ—Ç–≤–µ—Ç–µ
        const audioUrl = response.data.url || response.data.fileUrl || (response.data.file && response.data.file.url);
        
        if (audioUrl) {
          console.log('‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', audioUrl);
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∞—É–¥–∏–æ
          const audioData = {
            name: fileName,
            type: fileType,
            url: audioUrl,
            size: fileSize
          };
          
          console.log('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ:', audioData);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ state
          commit('ADD_AUDIO', audioData);
          
          return { success: true, message: `‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileName}` };
        } else {
          console.error('‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:', response.data);
          throw new Error('URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ:', error);
      return { 
        success: false, 
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ'
      };
    }
  },

  async uploadMultipleAudio({ dispatch }, files) {
    return Promise.all(files.map(file => dispatch('uploadAudio', file)));
  },

  async savePostAudio({ commit }, { postId, audio }) {
    try {
      const audioRef = databaseRef(database, `posts/${postId}/audio`);
      await set(audioRef, audio);
      commit('SET_POST_AUDIO', { postId, audio });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ –¥–ª—è –ø–æ—Å—Ç–∞:', error);
      throw error;
    }
  },

  async fetchPostAudio({ commit }, postId) {
    try {
      const snapshot = await get(databaseRef(database, `posts/${postId}/audio`));
      const audioFiles = snapshot.val() || [];
      commit('SET_POST_AUDIO', { postId, audio: audioFiles });
      return audioFiles;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –ø–æ—Å—Ç–∞:', error);
      throw error;
    }
  },

  async removePostAudio({ commit, state }, { postId, audioUrl }) {
    try {
      const audioFiles = state.postAudio[postId] || [];
      const updatedAudioFiles = audioFiles.filter(url => url !== audioUrl);
      
      await set(databaseRef(database, `posts/${postId}/audio`), updatedAudioFiles);
      commit('SET_POST_AUDIO', { postId, audio: updatedAudioFiles });
      
      return updatedAudioFiles;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –ø–æ—Å—Ç–∞:', error);
      throw error;
    }
  },

  async removeAudio({ commit, state }, index) {
    try {
      const audioToRemove = state.audioFiles[index];
      if (!audioToRemove) {
        throw new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ:', {
        index,
        audioFile: audioToRemove
      });

      // –£–¥–∞–ª—è–µ–º –∏–∑ state
      commit('REMOVE_AUDIO', index);

      return { success: true, message: '‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
      return {
        success: false,
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ'
      };
    }
  },

  clearAudio({ commit }) {
    commit('CLEAR_AUDIO');
  }
};

async function compressAudio(file) {
    console.log('üéµ –ù–∞—á–∞–ª–æ —Å–∂–∞—Ç–∏—è –∞—É–¥–∏–æ:', file.name);
    
    return new Promise(async (resolve, reject) => {
      try {
        // –°–æ–∑–¥–∞–µ–º AudioContext
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer
        const arrayBuffer = await file.arrayBuffer();
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
        const channels = [];
        for (let i = 0; i < audioBuffer.numberOfChannels; i++) {
          channels.push(audioBuffer.getChannelData(i));
        }
        
        // –°–æ–∑–¥–∞–µ–º Lame encoder
        const mp3encoder = new lamejs.Mp3Encoder(
          audioBuffer.numberOfChannels,
          audioBuffer.sampleRate,
          320 // –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        );
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float32 –≤ int16
        const samples = new Int16Array(channels[0].length * channels.length);
        for (let i = 0; i < channels[0].length; i++) {
          for (let channel = 0; channel < channels.length; channel++) {
            const sample = channels[channel][i];
            const index = i * channels.length + channel;
            samples[index] = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;
          }
        }
        
        // –ö–æ–¥–∏—Ä—É–µ–º –≤ MP3
        const mp3Data = [];
        const sampleBlockSize = 1152; // –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è MP3
        for (let i = 0; i < samples.length; i += sampleBlockSize) {
          const sampleChunk = samples.subarray(i, i + sampleBlockSize);
          const mp3buf = mp3encoder.encodeBuffer(sampleChunk);
          if (mp3buf.length > 0) {
            mp3Data.push(mp3buf);
          }
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        const mp3buf = mp3encoder.flush();
        if (mp3buf.length > 0) {
          mp3Data.push(mp3buf);
        }
        
        // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const blob = new Blob(mp3Data, { type: 'audio/mp3' });
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç
        const compressedFile = new File([blob], file.name.replace(/\.[^/.]+$/, '.mp3'), {
          type: 'audio/mp3',
          lastModified: Date.now()
        });
        
        console.log('‚úÖ –°–∂–∞—Ç–∏–µ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
          –∏—Å—Ö–æ–¥–Ω—ã–π–†–∞–∑–º–µ—Ä: file.size,
          —Å–∂–∞—Ç—ã–π–†–∞–∑–º–µ—Ä: compressedFile.size,
          –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–°–∂–∞—Ç–∏—è: (file.size / compressedFile.size).toFixed(2)
        });
        
        resolve(compressedFile);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∞—É–¥–∏–æ:', error);
        reject(error);
      }
    });
};

const getters = {
  getPostAudio: (state) => (postId) => {
    return state.postAudio[postId] || [];
  },
  getUploadProgress: (state) => (fileName) => {
    return state.uploadProgress[fileName] || 0;
  },
  getAudioFiles: (state) => {
    return state.audioFiles;
  }
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};